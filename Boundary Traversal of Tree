class Solution {
public:
    bool isleaf(Node*root)
    {
        return !root->left && !root->right;
    }
    void addleftboundary(Node*root,vector<int>&res)
    {
        Node *curr=root->left;
        while(curr)
        {
            if(!isleaf(curr)) res.push_back(curr->data);
            if(curr->left) curr=curr->left;
            else
            {
                curr=curr->right;
            }
        }
    }
    void addleaf(Node*root,vector<int>&res)
    {
        if(isleaf(root))
        {
            res.push_back(root->data);
        }
      if(root->left) addleaf(root->left,res);
      if(root->right) addleaf(root->right,res);
    }
    void addrightboundary(Node*root,vector<int>&res)
    {
        Node *curr=root->right;
        vector<int>temp;
        while(curr)
        {
            if(!isleaf(curr))  temp.push_back(curr->data);
            if(curr->right) curr=curr->right;
            else
            {
                curr=curr->left;
            }
        }
        //reverse print rightboundary
        for(int i=temp.size()-1;i>=0;i--)
        {
            res.push_back(temp[i]);
        }
    }
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int>res;
        if(root==NULL) return res;
        if(!isleaf(root)) res.push_back(root->data);
    
        addleftboundary(root,res);
         addleaf(root,res);
        addrightboundary(root,res);
        return res;
    }
};
